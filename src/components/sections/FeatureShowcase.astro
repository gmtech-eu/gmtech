---
import { Image } from 'astro:assets';
import { getImage } from 'astro:assets';
import featureShowcaseData from '@data/featureShowcase.json';

// Import default images as fallbacks
import image_1 from '@images/analytics.webp';
import image_2 from '@images/program_management.webp';
import image_3 from '@images/cultural_bridge.webp';

const { title, subtitle, features: cmsFeatures } = featureShowcaseData;


// Fallback images map
const fallbackImages = {
  'Business Development': image_1,
  'Program Management': image_2,
  'Cultural Bridge': image_3,
};

// CSS classes for layout (keeping original design)
const featureClasses = [
  'content-center border-b border-dashed border-slate-400 py-5 sm:col-span-2 sm:p-5',
  'content-center py-5 sm:row-start-2 sm:p-5 sm:py-10',
  'content-center border-t border-dashed border-slate-400 py-5 sm:row-span-2 sm:row-start-2 sm:border-l sm:border-t-0 sm:p-5 sm:text-right',
  'content-center border-t border-dashed border-slate-400 py-5 sm:p-5'
];

const imageAlignments = [
  'mx-auto mt-10 rounded-xl shadow-lg sm:w-[75%]',
  'ml-auto mr-auto mt-10 w-[65%] rounded-xl shadow-lg sm:ml-0 sm:w-[45%]',
  'ml-auto mr-auto mt-10 w-[80%] rounded-xl shadow-lg sm:mr-0',
  ''
];

// Process features from CMS with dynamic import like TechnologySlideshow
const processedFeatures = await Promise.all(
  cmsFeatures.map(async (feature, index) => {
    let processedImage = null;
    let imageAlt = '';
    
    // Check if feature has image
    if (feature.image.discriminant && feature.image.value) {
      const imageSrc = feature.image.value.src;
      imageAlt = feature.image.value.alt || '';
      
      if (imageSrc) {
        try {
          // Try dynamic import like TechnologySlideshow
          const imageModule = await import(/* @vite-ignore */ imageSrc.replace('@assets', '/src/assets'));
          const optimizedImage = await getImage({ src: imageModule.default, format: 'webp' });
          processedImage = optimizedImage.src;
        } catch (error) {
          // Use fallback image if available
          const fallback = fallbackImages[feature.title];
          if (fallback) {
            const optimizedFallback = await getImage({ src: fallback, format: 'webp' });
            processedImage = optimizedFallback.src;
          }
        }
      } else {
        // No src provided, try fallback
        const fallback = fallbackImages[feature.title];
        if (fallback) {
          const optimizedFallback = await getImage({ src: fallback, format: 'webp' });
          processedImage = optimizedFallback.src;
        }
      }
    }
    
    return {
      ...feature,
      class: featureClasses[index] || 'content-center py-5 sm:p-5',
      alignment: imageAlignments[index] || '',
      processedImage,
      imageAlt,
      moreFeatures: feature.additionalItems.discriminant ? feature.additionalItems.value : null
    };
  })
);
---

<div class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 md:py-14 lg:px-8 lg:py-20">
  {/* Section container for the title and subtitle */}
  <div class="mx-auto mb-10 max-w-2xl text-center lg:mb-14">
    <h2 class="text-2xl font-semibold text-balance text-slate-800 md:text-3xl md:leading-tight">
      <Fragment set:html={title} />
    </h2>
    <p class="mt-1 text-pretty text-slate-600">
      <Fragment set:html={subtitle} />
    </p>
  </div>

  <div class="mx-auto grid max-w-[85rem] px-4 pb-10 sm:grid-cols-2 sm:grid-rows-3 sm:px-6 lg:px-8 lg:pb-14">
    {
      processedFeatures.map((feature) => (
        <div class={`${feature.class}`}>
          <h2 class="text-2xl font-bold text-slate-600">{feature.title}</h2>

          {feature.description && (
            <p class="mt-2 text-base/6 text-slate-600">
              <Fragment set:html={feature.description} />
            </p>
          )}

          {feature.processedImage && (
            <img 
              class={`${feature.alignment || ''}`} 
              src={feature.processedImage} 
              alt={feature.imageAlt || ""} 
            />
          )}

          {feature.moreFeatures && (
            <ul class="mt-4 ml-4 w-4/5 list-inside list-disc space-y-2 text-base/6 text-slate-600 marker:text-teal-600">
              {feature.moreFeatures.map((item) => (
                <li>{item}</li>
              ))}
            </ul>
          )}
        </div>
      ))
    }
  </div>
</div>
